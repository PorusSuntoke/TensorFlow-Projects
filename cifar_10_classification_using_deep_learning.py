# -*- coding: utf-8 -*-
"""CIFAR-10 Classification Using Deep Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KHq_FbiCQTL3N-FqkxcqGbZrHI0z5y0t

**STEP #0: PROBLEM STATEMENT**



  



*   CIFAR-10 is a dataset that consists of several images divided into the
following 10 classes:        
        
1.   Airplanes

2.   Cars

3.   Birds

4.   Cats

5.   Deer

6.   Dogs

7.   Frogs

8.   Horses

9.   Ships

10.   Trucks

*   The dataset stands for the Canadian Institute For Advanced Research (CIFAR)

*   CIFAR-10 is widely used for machine learning and computer vision applications.

*   The dataset consists of 60,000 32x32 color images and 6,000 images of each class.

*   Images have low resolution (32x32).

*   Data Source: https://www.cs.toronto.edu/~kriz/cifar.html

*   Fashion training set consists of 60,000 images divided into 50,000 training and 10,000 testing samples. Dataset sample consists of 28x28 grayscale image, associated with a label from 10 classes.

**STEP #1: IMPORT LIBRARIES**
"""

from google.colab import drive 
drive.mount('/content/drive')

!pip install tensorflow-gpu==2.0.0
import tensorflow as tf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import datetime
import random

tf.__version__

"""**STEP #2: LOAD DATASET**"""

from keras.datasets import cifar10
(X_train, y_train), (X_test, y_test) = cifar10.load_data()

X_train.shape

X_test.shape

y_train.shape

y_test.shape

"""**STEP #3: DATA VISUALIZATION**"""

i = 30009
plt.imshow(X_train[i])
print(y_train[i])

W_grid = 4
L_grid = 4

fig, axes = plt.subplots(W_grid, L_grid, figsize = (25, 25))
axes = axes.ravel()

n_training = len(X_train)


for i in np.arange(0, L_grid * W_grid):
    index = np.random.randint(0, n_training)
    axes[i].imshow(X_train[index])
    axes[i].set_title(y_train[index])
    axes[i].axis('off')

plt.subplots_adjust(hspace = 0.4)

n_training

"""**STEP #4: DATA PREPARATION**"""

X_train

X_train = X_train.astype('float32')
X_test = X_test.astype('float32')

number_cat = 10

y_train

import keras 
y_train = keras.utils.to_categorical(y_train, number_cat)

y_train

y_test = keras.utils.to_categorical(y_test, number_cat)

y_test

X_train = X_train/255
X_test = X_test/255

X_train

X_train.shape

Input_shape = X_train.shape[1:]

Input_shape

y_train.shape

"""**STEP #5: TRAIN THE MODEL**"""

cnn = tf.keras.Sequential()

cnn.add(tf.keras.layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (32,32,3)))
cnn.add(tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'))
cnn.add(tf.keras.layers.MaxPooling2D(2,2))
cnn.add(tf.keras.layers.Dropout(0.3))


cnn.add(tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'))
cnn.add(tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'))
cnn.add(tf.keras.layers.MaxPooling2D(2,2))
cnn.add(tf.keras.layers.Dropout(0.3))

cnn.add(tf.keras.layers.Flatten())

cnn.add(tf.keras.layers.Dense(1024, activation = 'relu'))
cnn.add(tf.keras.layers.Dropout(0.3))

cnn.add(tf.keras.layers.Dense(1024, activation = 'relu'))

cnn.add(tf.keras.layers.Dense(10, activation = 'softmax'))
cnn.summary()

cnn.compile(optimizer = tf.keras.optimizers.RMSprop(0.0001, decay = 1e-6), loss ='categorical_crossentropy', metrics =['accuracy'])

epochs = 100

history = cnn.fit(X_train, y_train, batch_size = 512, epochs = epochs)

"""**STEP #6: EVALUATE THE MODEL**"""

evaluation = cnn.evaluate(X_test, y_test)
print('Test Accuracy: {}'.format(evaluation[1]))

predicted_classes = cnn.predict_classes(X_test) 
predicted_classes

y_test

y_test = y_test.argmax(1)

y_test

L = 7
W = 7
fig, axes = plt.subplots(L, W, figsize = (12, 12))
axes = axes.ravel()

for i in np.arange(0, L*W):
    axes[i].imshow(X_test[i])
    axes[i].set_title('Prediction = {}\n True = {}'.format(predicted_classes[i], y_test[i]))
    axes[i].axis('off')

plt.subplots_adjust(wspace = 1)

from sklearn.metrics import confusion_matrix
import seaborn as sns

cm = confusion_matrix(predicted_classes, y_test)
cm
plt.figure(figsize = (10, 10))
sns.heatmap(cm, annot = True)